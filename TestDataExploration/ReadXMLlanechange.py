'''
    This python file uses test data of the SUMO simulation
    consequently the data are not generated by us.
    In this file we transform the emission.xml into a dataframe.


'''

# --------------------------------------------- ReadXMLlanechange -------------------------------------------

# Imports
import pandas as pd
import xml.etree.ElementTree as ET

root = ET.parse('/Users/emily/PROJECTS/FleetAnalytics/data/lanechange_output.xml').getroot()
#root = ET.parse('/Users/emily/PROJECTS/FleetAnalytics/data/emission_output.xml').getroot()

df = pd.DataFrame(columns=["change", "type", "time", "from", "to", "dir","speed","pos","reason","leaderGap","leaderSecureGap", "leaderSpeed", "followerGap","followerSecureGap", "followerSpeed", "origLeaderGap", "origLeaderSecureGap", "origLeaderSpeed"])

for type_tag in root.findall('change'):
    var_change = type_tag.get('id')
    #print("change: ", var_change)

    var_type = type_tag.get('type')
    #print("type: ", var_type)

    var_time = type_tag.get('time')
    #print("time: ", var_time)


    var_from = type_tag.get('from')
    var_to = type_tag.get('to')
    var_dir = type_tag.get('dir')


    var_speed = type_tag.get('speed')
    var_pos = type_tag.get('pos')
    var_reason = type_tag.get('reason')
    var_leaderGap = type_tag.get('leaderGap')
    var_leaderSecureGap = type_tag.get('leaderSecureGap')
    var_leaderSpeed = type_tag.get('leaderSpeed')

    var_followerGap = type_tag.get('followerGap')
    var_followerSecureGap = type_tag.get('followerSecureGap')
    var_followerSpeed = type_tag.get('followerSpeed')

    var_origLeaderGap = type_tag.get('origLeaderGap')
    var_origLeaderSecureGap = type_tag.get('origLeaderSecureGap')
    var_origLeaderSpeed = type_tag.get('origLeaderSpeed')

    df = df.append({
        "change": var_change,
        "type": var_type,
        "time": var_time,
        "from": var_from,
        "to": var_to,
        "dir": var_dir,
        "speed": var_speed,
        "pos": var_pos,
        "reason": var_reason,
        "leaderGap": var_leaderGap,
        "leaderSecureGap": var_leaderSecureGap,
        "leaderSpeed": var_leaderSpeed,
        "followerGap": var_followerGap,
        "followerSecureGap": var_followerSecureGap,
        "followerSpeed": var_followerSpeed,
        "origLeaderGap": var_origLeaderGap,
        "origLeaderSecureGap": var_origLeaderSecureGap,
        "origLeaderSpeed": var_origLeaderSpeed
    }, ignore_index=True)



print(df.to[:10])
#df.to_excel("/Users/emily/Desktop/lanechange_excel.xlsx")


"""       
        "from": var_from,
        "to": var_to,
        "dir": var_dir,
        "speed": var_speed,
        "pos": var_pos,
        "reason": var_reason,
        "leaderGap": var_leaderGap,
        "leaderSecureGap": var_leaderSecureGap,
        "leaderSpeed": var_leaderSpeed,
        "followerGap": var_followerGap,
        "followerSecureGap": var_followerSecureGap,
        "followerSpeed": var_followerSpeed,
        "origLeaderGap": var_origLeaderGap,
        "origLeaderSecureGap": var_origLeaderSecureGap,
        "origLeaderSpeed": var_origLeaderSpeed

"""