'''
    This python file uses test data of the SUMO simulation
    consequently the data are not generated by us. We used it to
    do a first data evaluation.
    In this file data science methods are used on the data.


'''

# --------------------------------------------- DataScience_emission -------------------------------------------

#Imports
import pandas as pd
from sklearn import linear_model
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

#Read data
da= pd.read_excel("/Users/emily/Desktop/Prepared_Emission.xlsx")
print(da)
print(da.head(10))

#Clustering idea: speed
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt

#Use speed and NOx
#Find cluster size
sse = []
k_rng = range(1,10)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(da[['speed','NOx']])
    sse.append(km.inertia_)
sse

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.show((plt.plot(k_rng,sse)))

#cluster size is 3
km=KMeans(n_clusters=3)


#Compute the 3 clusters (0,1,2)
y_predicted=km.fit_predict(da[['speed','NOx']])
print(y_predicted)

#Extend csv with column and clusters
da['cluster']=y_predicted
print(da)

#Show clusters in colour
df1=da[da.cluster==0]
df2=da[da.cluster==1]
df3=da[da.cluster==2]

plt.scatter(df1.speed,df1['NOx'],color='blue')
plt.scatter(df2.speed,df2['NOx'],color='red')
plt.scatter(df3.speed,df3['NOx'],color='black')

plt.xlabel('speed')
plt.ylabel('NOx')
plt.show()

#Other ides
"""

km.cluster_centers_
df1=da[da.cluster==0]
df2=da[da.cluster==1]
df3=da[da.cluster==2]

plt.scatter(df1.speed,df1['NOx'],color='blue')
plt.scatter(df2.speed,df2['NOx'],color='red')
plt.scatter(df3.speed,df3['NOx'],color='black')

plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*')
plt.show()



#k-means CLustering speed, fuel
#Richtige Cluster Größe finden
sse = []
k_rng = range(1,10)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(da[['speed','fuel']])
    sse.append(km.inertia_)
sse

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.show((plt.plot(k_rng,sse)))

#Festlegen der CLuster Größe k=3
km=KMeans(n_clusters=4)


#Compute the 3 clusters (0,1,2)
y_predicted=km.fit_predict(da[['speed','fuel']])
print(y_predicted)

#6.	In diesem Schritt wird die csv-Tabelle um eine Spalte ergänzt angezeigt,
#nämlich um die Spalte Cluster, die zu jedem Eintrag zeigt, zu welchem Cluster der Datensatz gehört:
da['cluster']=y_predicted
print(da)

#Erzeugen dreier Dataframes, die zu jeweils einem Cluster gehören, farbige Anzeige des Clusters
df1=da[da.cluster==0]
df2=da[da.cluster==1]
df3=da[da.cluster==2]
df4=da[da.cluster==3]

plt.scatter(df1.speed,df1['fuel'],color='blue')
plt.scatter(df2.speed,df2['fuel'],color='red')
plt.scatter(df3.speed,df3['fuel'],color='black')
plt.scatter(df4.speed,df4['fuel'],color='green')

plt.xlabel('speed')
plt.ylabel('fuel')
plt.show()

km.cluster_centers_
f1=da[da.cluster==0]
df2=da[da.cluster==1]
df3=da[da.cluster==2]
df4=da[da.cluster==3]

plt.scatter(df1.speed,df1['fuel'],color='blue')
plt.scatter(df2.speed,df2['fuel'],color='red')
plt.scatter(df3.speed,df3['fuel'],color='black')
plt.scatter(df4.speed,df4['fuel'],color='green')

plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*')
plt.show()

"""

"""
#Linear regression speed und fuel (later: NOx)
plt.xlabel('speed')
plt.ylabel('fluel')
plt.scatter(da.speed,da.fuel,color='red',marker='+')
plt.show()

speed=da.speed
print(speed)

fuel=da.fuel
print(fuel)

# Create linear regression object
reg = linear_model.LinearRegression()
#fit = method to train the model using the training set
reg.fit(da[['speed']],da.fuel)
#Regressions Koeffizienten berechnen
a=reg.coef_
print(a)
#Intercept berechnen
b=reg.intercept_
print(b)
#Vorhersagen des fuels bei einem speed von 0.09
print(reg.predict([[0.09]]))

#Kontrollieren des Modells (y=m+x+b), m ist a, b ist b
print(a*0.09+b)
#Vorhersagen des fuels bei einem speed von 0.15
print(reg.predict([[0.15]]))
#Kontrollieren des Modells (y=m+x+b), m ist a, b ist b
print(a*0.15+b)


"""

#Linear regression HC and CO2
plt.xlabel('HC')
plt.ylabel('CO2')
plt.scatter(da.HC,da.CO2,color='red',marker='+')
plt.show()

HC=da.HC
print(HC)

CO2=da.CO2
print(CO2)

#Create linear regression object
reg = linear_model.LinearRegression()

#fit = method to train the model using the training set
reg.fit(da[['HC']],da.CO2)

#Calculate regression coefficient
a=reg.coef_
print(a)

#Calculate intercept
b=reg.intercept_
print(b)

#Predict CO2
print(reg.predict([[0.81]]))

#Control model
print(a*0.81+b)

#Predict CO2
print(reg.predict([[0.00]]))

#Control model
print(a*0.00+b)


x=da[['HC']]
y=da[['CO2']]
model = LinearRegression()
model.fit(x, y)

r_sq = model.score(x, y)
print('coefficient of determination:', r_sq)
print('intercept:', model.intercept_)
print('slope:', model.coef_)
